AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Dogotel - Dog Boarding Application for AWS Academy Learner Lab'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    Description: Environment name
  
  CognitoDomainPrefix:
    Type: String
    Default: 'dogotel-auth'
    Description: Cognito Domain Prefix (must be globally unique)
  
  AdminEmail:
    Type: String
    Default: 'admin@example.com'
    Description: Admin email for initial setup

Globals:
  Function:
    Timeout: 30
    Runtime: python3.11
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_TABLE_ROOMS: !Ref RoomsTable
        DYNAMODB_TABLE_BOOKINGS: !Ref BookingsTable
        DYNAMODB_TABLE_REVIEWS: !Ref ReviewsTable
        DYNAMODB_TABLE_USERS: !Ref UsersTable
        COGNITO_USER_POOL_ID: !Ref UserPool
        COGNITO_CLIENT_ID: !Ref UserPoolClient
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:
  # DynamoDB Tables
  RoomsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'dogotel-rooms-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: 'room_id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'room_id'
          KeyType: 'HASH'
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  BookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'dogotel-bookings-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: 'booking_id'
          AttributeType: 'S'
        - AttributeName: 'user_id'
          AttributeType: 'S'
        - AttributeName: 'room_id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'booking_id'
          KeyType: 'HASH'
      GlobalSecondaryIndexes:
        - IndexName: 'UserBookingsIndex'
          KeySchema:
            - AttributeName: 'user_id'
              KeyType: 'HASH'
          Projection:
            ProjectionType: ALL
        - IndexName: 'RoomBookingsIndex'
          KeySchema:
            - AttributeName: 'room_id'
              KeyType: 'HASH'
          Projection:
            ProjectionType: ALL

  ReviewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'dogotel-reviews-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: 'review_id'
          AttributeType: 'S'
        - AttributeName: 'room_id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'review_id'
          KeyType: 'HASH'
      GlobalSecondaryIndexes:
        - IndexName: 'RoomReviewsIndex'
          KeySchema:
            - AttributeName: 'room_id'
              KeyType: 'HASH'
          Projection:
            ProjectionType: ALL

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'dogotel-users-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: 'user_id'
          AttributeType: 'S'
        - AttributeName: 'email'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'user_id'
          KeyType: 'HASH'
      GlobalSecondaryIndexes:
        - IndexName: 'EmailIndex'
          KeySchema:
            - AttributeName: 'email'
              KeyType: 'HASH'
          Projection:
            ProjectionType: ALL

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'dogotel-users-${Environment}'
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: custom:role
          AttributeDataType: String
          Required: false
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub 'dogotel-client-${Environment}'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # API Gateway
  DogotelApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,PATCH,OPTIONS,HEAD'"
        AllowHeaders: "'Accept,Accept-Language,Authorization,Content-Language,Content-Type,Origin,Referer,User-Agent,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-Requested-With,X-Forwarded-For,X-Real-IP,Cache-Control,Pragma'"
        AllowOrigin: "'*'"
        AllowCredentials: false
        MaxAge: "'86400'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Accept,Accept-Language,Authorization,Content-Language,Content-Type,Origin,Referer,User-Agent,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-Requested-With,X-Forwarded-For,X-Real-IP,Cache-Control,Pragma'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,PATCH,OPTIONS,HEAD'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Accept,Accept-Language,Authorization,Content-Language,Content-Type,Origin,Referer,User-Agent,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-Requested-With,X-Forwarded-For,X-Real-IP,Cache-Control,Pragma'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,PATCH,OPTIONS,HEAD'"

  # Lambda Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'dogotel-auth-${Environment}'
      CodeUri: src/handlers/
      Handler: auth_handler.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminSetUserPassword
              - cognito-idp:AdminUpdateUserAttributes
              - cognito-idp:AdminGetUser
              - cognito-idp:AdminDeleteUser
            Resource: !GetAtt UserPool.Arn
      Events:
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /auth/register
            Method: post
            Auth:
              Authorizer: NONE
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /auth/login
            Method: post
            Auth:
              Authorizer: NONE
        Profile:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /auth/profile
            Method: get

  RoomsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'dogotel-rooms-${Environment}'
      CodeUri: src/handlers/
      Handler: rooms_handler.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoomsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
      Events:
        ListRooms:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms
            Method: get
            Auth:
              Authorizer: NONE
        GetRoom:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{room_id}
            Method: get
            Auth:
              Authorizer: NONE
        CreateRoom:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/rooms
            Method: post
        UpdateRoom:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/rooms/{room_id}
            Method: put
        DeleteRoom:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/rooms/{room_id}
            Method: delete

  BookingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'dogotel-bookings-${Environment}'
      CodeUri: src/handlers/
      Handler: bookings_handler.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoomsTable
        - Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
            Resource: "*"
      Events:
        CreateBooking:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /bookings
            Method: post
        GetUserBookings:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /bookings
            Method: get
        GetBooking:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /bookings/{booking_id}
            Method: get
        CancelBooking:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /bookings/{booking_id}
            Method: delete
        AdminGetAllBookings:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/bookings
            Method: get
        AdminUpdateBooking:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/bookings/{booking_id}
            Method: put

  ReviewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'dogotel-reviews-${Environment}'
      CodeUri: src/handlers/
      Handler: reviews_handler.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReviewsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
      Events:
        GetRoomReviews:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{room_id}/reviews
            Method: get
            Auth:
              Authorizer: NONE
        CreateReview:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /reviews
            Method: post
        UpdateReview:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /reviews/{review_id}
            Method: put
        DeleteReview:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /reviews/{review_id}
            Method: delete
        AdminGetAllReviews:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/reviews
            Method: get
        AdminModerateReview:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/reviews/{review_id}/moderate
            Method: put

  # Admin Functions
  AdminDashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'dogotel-admin-dashboard-${Environment}'
      CodeUri: src/handlers/
      Handler: admin_dashboard_handler.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RoomsTable
        - DynamoDBReadPolicy:
            TableName: !Ref BookingsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ReviewsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Events:
        GetDashboard:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/dashboard
            Method: get

  AdminReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'dogotel-admin-reports-${Environment}'
      CodeUri: src/handlers/
      Handler: admin_reports_handler.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RoomsTable
        - DynamoDBReadPolicy:
            TableName: !Ref BookingsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ReviewsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Events:
        GenerateReport:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/reports
            Method: get

  # S3 Bucket for Frontend and Image Storage
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'dogotel-website-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket}/*'

  # Simple notification for basic email alerts (POC level)
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'dogotel-notifications-${Environment}'

  # Initialize data function
  InitializeDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'dogotel-initialize-data-${Environment}'
      CodeUri: src/handlers/
      Handler: initialize_data_handler.lambda_handler
      Timeout: 300
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoomsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminSetUserPassword
              - cognito-idp:AdminUpdateUserAttributes
            Resource: !GetAtt UserPool.Arn
      Events:
        InitializeData:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/initialize
            Method: post
            Auth:
              Authorizer: NONE

Outputs:
  ApiUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${DogotelApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  WebsiteUrl:
    Description: 'S3 Website URL'
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteUrl'

  WebsiteBucketName:
    Description: 'S3 Bucket Name for Website'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucketName'

  CognitoUserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-CognitoUserPoolId'

  CognitoClientId:
    Description: 'Cognito Client ID'
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-CognitoClientId'

  Region:
    Description: 'AWS Region'
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${AWS::StackName}-Region' 