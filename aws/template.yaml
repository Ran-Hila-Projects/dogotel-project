AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Dogotel Backend API - Complete Implementation

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        DYNAMODB_TABLE_ROOMS: !Ref RoomsTable
        DYNAMODB_TABLE_BOOKINGS: !Ref BookingsTable
        DYNAMODB_TABLE_REVIEWS: !Ref ReviewsTable
        DYNAMODB_TABLE_DINING: !Ref DiningTable
        DYNAMODB_TABLE_SERVICES: !Ref ServicesTable
        DYNAMODB_TABLE_USERS: !Ref UsersTable
        BOOKING_EVENTS_QUEUE_URL: !Ref BookingEventsQueue
        BOOKING_CONFIRMATION_TOPIC_ARN: !Ref BookingConfirmationTopic
        S3_BUCKET: !Ref ImagesBucket

Resources:
  # S3 Bucket for images
  ImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "dogotel-images-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # S3 Bucket Policy for public read access
  ImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImagesBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${ImagesBucket}/*"

  # API Gateway
  DogotelApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,PATCH,OPTIONS,HEAD'"
        AllowHeaders: "'Accept,Accept-Language,Authorization,Content-Language,Content-Type,Origin,Referer,User-Agent,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-Requested-With,X-Forwarded-For,X-Real-IP,Cache-Control,Pragma'"
        AllowOrigin: "'*'"
        AllowCredentials: false
        MaxAge: "'86400'"
        ExposeHeaders: "'Date,X-Amzn-RequestId,X-Amzn-ErrorType,Content-Length'"

  # Lambda Functions
  
  # Rooms Handler - Endpoints 1,2,3,8,10,11,12
  RoomsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: rooms_handler.lambda_handler
      Events:
        # GET /api/rooms
        GetRooms:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms
            Method: get
        # GET /api/rooms/:id
        GetRoom:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}
            Method: get
        # GET /api/rooms/:id/unavailable-dates
        GetUnavailableDates:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}/unavailable-dates
            Method: get
        # GET /api/rooms/:id/unavailable-ranges
        GetUnavailableRanges:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}/unavailable-ranges
            Method: get
        # POST /api/rooms
        CreateRoom:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms
            Method: post
        # PUT /api/rooms/:id
        UpdateRoom:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}
            Method: put
        # DELETE /api/rooms/:id
        DeleteRoom:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}
            Method: delete
        # OPTIONS for CORS
        OptionsRooms:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms
            Method: options
        OptionsRoomId:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}
            Method: options
        OptionsUnavailableDates:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}/unavailable-dates
            Method: options
        OptionsUnavailableRanges:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}/unavailable-ranges
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoomsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
        - S3FullAccessPolicy:
            BucketName: !Ref ImagesBucket

  # Bookings Handler - Endpoints 4,5,9,13
  BookingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: bookings_handler.lambda_handler
      Events:
        # GET /api/bookings?userId=... (endpoint 4)
        # GET /api/bookings (endpoint 13)
        GetBookings:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /bookings
            Method: get
        # POST /api/bookings (endpoints 5 and 9)
        CreateBooking:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /bookings
            Method: post
        # OPTIONS for CORS
        OptionsBookings:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /bookings
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoomsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DiningTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BookingEventsQueue.QueueName

  # Dining and Services Handler - Endpoint 6
  DiningServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: dining_services_handler.lambda_handler
      Events:
        # GET /api/dining (list all)
        ListDining:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /dining
            Method: get
        # GET /api/services (list all)
        ListServices:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /services
            Method: get
        # GET /api/dining/:id
        GetDining:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /dining/{id}
            Method: get
        # GET /api/services/:id
        GetService:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /services/{id}
            Method: get
        # OPTIONS for CORS
        OptionsListDining:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /dining
            Method: options
        OptionsListServices:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /services
            Method: options
        OptionsDining:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /dining/{id}
            Method: options
        OptionsServices:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /services/{id}
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiningTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable

  # Reviews Handler - Endpoint 7
  ReviewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: reviews_handler.lambda_handler
      Events:
        # POST /api/rooms/:id/reviews
        CreateReview:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}/reviews
            Method: post
        # GET /api/rooms/:id/reviews
        GetReviews:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}/reviews
            Method: get
        # OPTIONS for CORS
        OptionsReviews:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /rooms/{id}/reviews
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReviewsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoomsTable

  # User Handler - Endpoints 14,15
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: user_handler.lambda_handler
      Events:
        # GET /api/user/:email
        GetUserProfile:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /user/{email}
            Method: get
        # PUT /api/user/:email (for profile updates)
        UpdateUserProfile:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /user/{email}
            Method: put
        # GET /api/bookings/:email
        GetBookingHistory:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /bookings/{email}
            Method: get
        # OPTIONS for CORS
        OptionsUser:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /user/{email}
            Method: options
        OptionsBookingHistory:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /bookings/{email}
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
        - S3FullAccessPolicy:
            BucketName: !Ref ImagesBucket

  # Authentication Handler
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: auth_handler.lambda_handler
      Events:
        # POST /api/auth/login
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /auth/login
            Method: post
        # POST /api/auth/register
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /auth/register
            Method: post
        # POST /api/auth/logout
        Logout:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /auth/logout
            Method: post
        # OPTIONS for CORS
        OptionsLogin:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /auth/login
            Method: options
        OptionsRegister:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /auth/register
            Method: options
        OptionsLogout:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /auth/logout
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - S3FullAccessPolicy:
            BucketName: !Ref ImagesBucket

  # Admin Dashboard Handler
  AdminDashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: admin_dashboard_handler.lambda_handler
      Events:
        # GET /api/admin/dashboard
        GetDashboard:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/dashboard
            Method: get
        # OPTIONS for CORS
        OptionsDashboard:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/dashboard
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoomsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ReviewsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable

  # Admin Reports Handler
  AdminReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: admin_reports_handler.lambda_handler
      Events:
        # GET /api/admin/reports
        GetReports:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/reports
            Method: get
        # OPTIONS for CORS
        OptionsReports:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/reports
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoomsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ReviewsTable

  # Initialize Data Handler
  InitializeDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: initialize_data_handler.lambda_handler
      Events:
        # POST /api/admin/initialize
        InitializeData:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/initialize
            Method: post
        # OPTIONS for CORS
        OptionsInitialize:
          Type: Api
          Properties:
            RestApiId: !Ref DogotelApi
            Path: /admin/initialize
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoomsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BookingsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ReviewsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DiningTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - S3FullAccessPolicy:
            BucketName: !Ref ImagesBucket

  # Booking Event Processor (for SQS/SNS notifications)
  BookingEventProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: booking_event_processor.lambda_handler
      Events:
        BookingEventTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt BookingEventsQueue.Arn
            BatchSize: 1
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt BookingConfirmationTopic.TopicName

  # DynamoDB Tables
  RoomsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DogotelRooms
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: room_id
          AttributeType: S
      KeySchema:
        - AttributeName: room_id
          KeyType: HASH

  BookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DogotelBookings
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: bookingId
          AttributeType: S
        - AttributeName: userEmail
          AttributeType: S
      KeySchema:
        - AttributeName: bookingId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserBookingsIndex
          KeySchema:
            - AttributeName: userEmail
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ReviewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DogotelReviews
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: review_id
          AttributeType: S
        - AttributeName: room_id
          AttributeType: S
      KeySchema:
        - AttributeName: review_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: RoomReviewsIndex
          KeySchema:
            - AttributeName: room_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  DiningTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DogotelDining
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: dining_id
          AttributeType: S
      KeySchema:
        - AttributeName: dining_id
          KeyType: HASH

  ServicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DogotelServices
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: service_id
          AttributeType: S
      KeySchema:
        - AttributeName: service_id
          KeyType: HASH

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DogotelUsers
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH

  # SQS Queue for booking events
  BookingEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DogotelBookingEvents
      VisibilityTimeoutSeconds: 300

  # SNS Topic for booking confirmations
  BookingConfirmationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: DogotelBookingConfirmations

Outputs:
  DogotelApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${DogotelApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  
  ImagesBucketName:
    Description: "S3 Bucket for images"
    Value: !Ref ImagesBucket
    
  ImagesBucketUrl:
    Description: "S3 Bucket URL for images"
    Value: !Sub "https://${ImagesBucket}.s3.amazonaws.com/" 